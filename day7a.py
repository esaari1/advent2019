#phases = [4,3,2,1,0]
#program = [3,15,3,16,1002,16,10,16,1,16,15,15,4,15,99,0,0]

#phases = [0,1,2,3,4]
#program = [3,23,3,24,1002,24,10,24,1002,23,-1,23,101,5,23,23,1,24,23,23,4,23,99,0,0]

#phases = [1,0,4,3,2]
#program = [3,31,3,32,1002,32,10,32,1001,31,-2,31,1007,31,0,33,1002,33,7,33,1,33,31,31,1,32,31,31,4,31,99,0,0,0]

program = [3,8,1001,8,10,8,105,1,0,0,21,38,63,72,85,110,191,272,353,434,99999,3,9,102,4,9,9,101,2,9,9,102,3,9,9,4,9,99,3,9,1001,9,4,9,102,2,9,9,1001,9,5,9,1002,9,5,9,101,3,9,9,4,9,99,3,9,1001,9,2,9,4,9,99,3,9,1001,9,3,9,102,2,9,9,4,9,99,3,9,101,2,9,9,102,2,9,9,1001,9,2,9,1002,9,4,9,101,2,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,99,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,99,3,9,1001,9,1,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,101,2,9,9,4,9,99,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,99]

seqs = [
[1,2,3,4,5],
[2,1,3,4,5],
[3,1,2,4,5],
[1,3,2,4,5],
[2,3,1,4,5],
[3,2,1,4,5],
[3,2,4,1,5],
[2,3,4,1,5],
[4,3,2,1,5],
[3,4,2,1,5],
[2,4,3,1,5],
[4,2,3,1,5],
[4,1,3,2,5],
[1,4,3,2,5],
[3,4,1,2,5],
[4,3,1,2,5],
[1,3,4,2,5],
[3,1,4,2,5],
[2,1,4,3,5],
[1,2,4,3,5],
[4,2,1,3,5],
[2,4,1,3,5],
[1,4,2,3,5],
[4,1,2,3,5],
[5,1,2,3,4],
[1,5,2,3,4],
[2,5,1,3,4],
[5,2,1,3,4],
[1,2,5,3,4],
[2,1,5,3,4],
[2,1,3,5,4],
[1,2,3,5,4],
[3,2,1,5,4],
[2,3,1,5,4],
[1,3,2,5,4],
[3,1,2,5,4],
[3,5,2,1,4],
[5,3,2,1,4],
[2,3,5,1,4],
[3,2,5,1,4],
[5,2,3,1,4],
[2,5,3,1,4],
[1,5,3,2,4],
[5,1,3,2,4],
[3,1,5,2,4],
[1,3,5,2,4],
[5,3,1,2,4],
[3,5,1,2,4],
[4,5,1,2,3],
[5,4,1,2,3],
[1,4,5,2,3],
[4,1,5,2,3],
[5,1,4,2,3],
[1,5,4,2,3],
[1,5,2,4,3],
[5,1,2,4,3],
[2,1,5,4,3],
[1,2,5,4,3],
[5,2,1,4,3],
[2,5,1,4,3],
[2,4,1,5,3],
[4,2,1,5,3],
[1,2,4,5,3],
[2,1,4,5,3],
[4,1,2,5,3],
[1,4,2,5,3],
[5,4,2,1,3],
[4,5,2,1,3],
[2,5,4,1,3],
[5,2,4,1,3],
[4,2,5,1,3],
[2,4,5,1,3],
[3,4,5,1,2],
[4,3,5,1,2],
[5,3,4,1,2],
[3,5,4,1,2],
[4,5,3,1,2],
[5,4,3,1,2],
[5,4,1,3,2],
[4,5,1,3,2],
[1,5,4,3,2],
[5,1,4,3,2],
[4,1,5,3,2],
[1,4,5,3,2],
[1,3,5,4,2],
[3,1,5,4,2],
[5,1,3,4,2],
[1,5,3,4,2],
[3,5,1,4,2],
[5,3,1,4,2],
[4,3,1,5,2],
[3,4,1,5,2],
[1,4,3,5,2],
[4,1,3,5,2],
[3,1,4,5,2],
[1,3,4,5,2],
[2,3,4,5,1],
[3,2,4,5,1],
[4,2,3,5,1],
[2,4,3,5,1],
[3,4,2,5,1],
[4,3,2,5,1],
[4,3,5,2,1],
[3,4,5,2,1],
[5,4,3,2,1],
[4,5,3,2,1],
[3,5,4,2,1],
[5,3,4,2,1],
[5,2,4,3,1],
[2,5,4,3,1],
[4,5,2,3,1],
[5,4,2,3,1],
[2,4,5,3,1],
[4,2,5,3,1],
[3,2,5,4,1],
[2,3,5,4,1],
[5,3,2,4,1],
[3,5,2,4,1],
[2,5,3,4,1],
[5,2,3,4,1]
]

def parseOpcode(o):
	s = str(o)
	while len(s) < 5:
		s = "0" + s
	return int(s[2]), int(s[1]), int(s[0]), int(s[3:])

def getVals(input, i, m1, m2, m3):
	val1 = input[i + 1]
	val2 = input[i + 2]
	val3 = input[i + 3]

	if m1 == 0:
		val1 = input[val1]
	if m2 == 0:
		val2 = input[val2]
	return val1, val2, val3

def getVals2(input, i, m1, m2):
	val1 = input[i + 1]
	val2 = input[i + 2]

	if m1 == 0:
		val1 = input[val1]
	if m2 == 0:
		val2 = input[val2]

	return val1, val2

def runProgram(input, phase, amp):
	i = 0
	inputIdx = 0
	inputs = [phase, amp]

	while True:
		res = parseOpcode(input[i])
		opcode = res[3]

		if opcode == 99:
			break

		elif opcode == 1:
			val1, val2, val3 = getVals(input, i, res[0], res[1], res[2])
			input[val3] = val1 + val2
			i = i + 4

		elif opcode == 2:
			val1, val2, val3 = getVals(input, i, res[0], res[1], res[2])
			input[val3] = val1 * val2
			i = i + 4

		elif opcode == 3:
			val = input[i + 1]
			input[val] = inputs[inputIdx]
			inputIdx += 1
			i += 2

		elif opcode == 4:
			val = input[i + 1]
			if res[0] == 0:
				val = input[val]
			return val
			i += 2

		elif opcode == 5:
			val1, val2 = getVals2(input, i, res[0], res[1])
			if val1 != 0:
				i = val2
			else:
				i += 3

		elif opcode == 6:
			val1, val2 = getVals2(input, i, res[0], res[1])
			if val1 == 0:
				i = val2
			else:
				i += 3

		elif opcode == 7:
			val1, val2, val3 = getVals(input, i, res[0], res[1], res[2])
			if val1 < val2:
				input[val3] = 1
			else:
				input[val3] = 0
			i += 4

		elif opcode == 8:
			val1, val2, val3 = getVals(input, i, res[0], res[1], res[2])
			if val1 == val2:
				input[val3] = 1
			else:
				input[val3] = 0
			i += 4

		else:
			print 'bad ', opcode
			break

	return 0

def doRun(phases):
	signal = 0
	for p in phases:
		input = program[:]
		signal = runProgram(input, p, signal)
	return signal

if __name__ == "__main__":
	#phases = [1,0,4,3,2]
	#print doRun(phases)
	answer = 0
	for phases in seqs:
		phases = [p - 1 for p in phases]
		sig = doRun(phases)
		if answer < sig:
			answer = sig
	print answer
