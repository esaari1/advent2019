phase = [0, 1, 0, -1]

# phase vals repeast gen times.
# length of phase for a gen is 4 * gen
# need to pop off first element (shift left by 1)
def phaseAt(gen, idx):
	l = gen * 4
	idx2 = ((idx + 1) % l) / gen
	return phase[idx2]

#sin = '03036732577212944063491565474664' * 10000
#sin = '02935109699940807407585447034323' * 10000
sin = '03081770884921959731165446850517' * 10000
sin = '59791911701697178620772166487621926539855976237879300869872931303532122404711706813176657053802481833015214226705058704017099411284046473395211022546662450403964137283487707691563442026697656820695854453826690487611172860358286255850668069507687936410599520475680695180527327076479119764897119494161366645257480353063266653306023935874821274026377407051958316291995144593624792755553923648392169597897222058613725620920233283869036501950753970029182181770358827133737490530431859833065926816798051237510954742209939957376506364926219879150524606056996572743773912030397695613203835011524677640044237824961662635530619875905369208905866913334027160178'
sin = sin * 10000
offset = int(sin[:7])

print offset
sin = sin[offset:]
print len(sin)

#exit(0)

for j in range(100):
	print j
	idx = 0
	newSin = ''
	sum = 0
	while idx < len(sin):
		idx2 = len(sin) - idx - 1
		sum += int(sin[idx2])
		newSin = str(sum)[-1] + newSin
		idx += 1

	sin = newSin

print sin[:8]