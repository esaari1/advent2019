program = [3,26,1001,26,-4,26,3,27,1002,27,2,27,1,27,26,27,4,27,1001,28,-1,28,1005,28,6,99,0,0,5]
program = [3,52,1001,52,-5,52,3,53,1,52,56,54,1007,54,5,55,1005,55,26,1001,54,-5,54,1105,1,12,1,53,54,53,1008,54,0,55,1001,55,1,55,2,53,55,53,4,53,1001,56,-1,56,1005,56,6,99,0,0,0,0,10]

program = [3,8,1001,8,10,8,105,1,0,0,21,38,63,72,85,110,191,272,353,434,99999,3,9,102,4,9,9,101,2,9,9,102,3,9,9,4,9,99,3,9,1001,9,4,9,102,2,9,9,1001,9,5,9,1002,9,5,9,101,3,9,9,4,9,99,3,9,1001,9,2,9,4,9,99,3,9,1001,9,3,9,102,2,9,9,4,9,99,3,9,101,2,9,9,102,2,9,9,1001,9,2,9,1002,9,4,9,101,2,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,99,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,99,3,9,1001,9,1,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,101,2,9,9,4,9,99,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,99]

inputs = [
	program[:],
	program[:],
	program[:],
	program[:],
	program[:],
]

inputRead = [False, False, False, False, False]

pointers = [0, 0, 0, 0, 0]

seqs = [
[1,2,3,4,5],
[2,1,3,4,5],
[3,1,2,4,5],
[1,3,2,4,5],
[2,3,1,4,5],
[3,2,1,4,5],
[3,2,4,1,5],
[2,3,4,1,5],
[4,3,2,1,5],
[3,4,2,1,5],
[2,4,3,1,5],
[4,2,3,1,5],
[4,1,3,2,5],
[1,4,3,2,5],
[3,4,1,2,5],
[4,3,1,2,5],
[1,3,4,2,5],
[3,1,4,2,5],
[2,1,4,3,5],
[1,2,4,3,5],
[4,2,1,3,5],
[2,4,1,3,5],
[1,4,2,3,5],
[4,1,2,3,5],
[5,1,2,3,4],
[1,5,2,3,4],
[2,5,1,3,4],
[5,2,1,3,4],
[1,2,5,3,4],
[2,1,5,3,4],
[2,1,3,5,4],
[1,2,3,5,4],
[3,2,1,5,4],
[2,3,1,5,4],
[1,3,2,5,4],
[3,1,2,5,4],
[3,5,2,1,4],
[5,3,2,1,4],
[2,3,5,1,4],
[3,2,5,1,4],
[5,2,3,1,4],
[2,5,3,1,4],
[1,5,3,2,4],
[5,1,3,2,4],
[3,1,5,2,4],
[1,3,5,2,4],
[5,3,1,2,4],
[3,5,1,2,4],
[4,5,1,2,3],
[5,4,1,2,3],
[1,4,5,2,3],
[4,1,5,2,3],
[5,1,4,2,3],
[1,5,4,2,3],
[1,5,2,4,3],
[5,1,2,4,3],
[2,1,5,4,3],
[1,2,5,4,3],
[5,2,1,4,3],
[2,5,1,4,3],
[2,4,1,5,3],
[4,2,1,5,3],
[1,2,4,5,3],
[2,1,4,5,3],
[4,1,2,5,3],
[1,4,2,5,3],
[5,4,2,1,3],
[4,5,2,1,3],
[2,5,4,1,3],
[5,2,4,1,3],
[4,2,5,1,3],
[2,4,5,1,3],
[3,4,5,1,2],
[4,3,5,1,2],
[5,3,4,1,2],
[3,5,4,1,2],
[4,5,3,1,2],
[5,4,3,1,2],
[5,4,1,3,2],
[4,5,1,3,2],
[1,5,4,3,2],
[5,1,4,3,2],
[4,1,5,3,2],
[1,4,5,3,2],
[1,3,5,4,2],
[3,1,5,4,2],
[5,1,3,4,2],
[1,5,3,4,2],
[3,5,1,4,2],
[5,3,1,4,2],
[4,3,1,5,2],
[3,4,1,5,2],
[1,4,3,5,2],
[4,1,3,5,2],
[3,1,4,5,2],
[1,3,4,5,2],
[2,3,4,5,1],
[3,2,4,5,1],
[4,2,3,5,1],
[2,4,3,5,1],
[3,4,2,5,1],
[4,3,2,5,1],
[4,3,5,2,1],
[3,4,5,2,1],
[5,4,3,2,1],
[4,5,3,2,1],
[3,5,4,2,1],
[5,3,4,2,1],
[5,2,4,3,1],
[2,5,4,3,1],
[4,5,2,3,1],
[5,4,2,3,1],
[2,4,5,3,1],
[4,2,5,3,1],
[3,2,5,4,1],
[2,3,5,4,1],
[5,3,2,4,1],
[3,5,2,4,1],
[2,5,3,4,1],
[5,2,3,4,1]
]

def parseOpcode(o):
	s = str(o)
	while len(s) < 5:
		s = "0" + s
	return int(s[2]), int(s[1]), int(s[0]), int(s[3:])

def getVals(input, i, m1, m2, m3):
	val1 = input[i + 1]
	val2 = input[i + 2]
	val3 = input[i + 3]

	if m1 == 0:
		val1 = input[val1]
	if m2 == 0:
		val2 = input[val2]
	return val1, val2, val3

def getVals2(input, i, m1, m2):
	val1 = input[i + 1]
	val2 = input[i + 2]

	if m1 == 0:
		val1 = input[val1]
	if m2 == 0:
		val2 = input[val2]

	return val1, val2

def runProgram(idx, input, i, phase, signal):
	ret = 0

	while i < len(input):
		res = parseOpcode(input[i])
		opcode = res[3]

		if opcode == 99:
			return signal, i, True

		elif opcode == 1:
			val1, val2, val3 = getVals(input, i, res[0], res[1], res[2])
			input[val3] = val1 + val2
			i = i + 4

		elif opcode == 2:
			val1, val2, val3 = getVals(input, i, res[0], res[1], res[2])
			input[val3] = val1 * val2
			i = i + 4

		elif opcode == 3:
			val = input[i + 1]
			if inputRead[idx] == False:
				input[val] = phase
			else:
				input[val] = signal

			inputRead[idx] = True
			i += 2

		elif opcode == 4:
			val = input[i + 1]
			if res[0] == 0:
				val = input[val]
			ret = val
			i += 2
			return ret, i, False

		elif opcode == 5:
			val1, val2 = getVals2(input, i, res[0], res[1])
			if val1 != 0:
				i = val2
			else:
				i += 3

		elif opcode == 6:
			val1, val2 = getVals2(input, i, res[0], res[1])
			if val1 == 0:
				i = val2
			else:
				i += 3

		elif opcode == 7:
			val1, val2, val3 = getVals(input, i, res[0], res[1], res[2])
			if val1 < val2:
				input[val3] = 1
			else:
				input[val3] = 0
			i += 4

		elif opcode == 8:
			val1, val2, val3 = getVals(input, i, res[0], res[1], res[2])
			if val1 == val2:
				input[val3] = 1
			else:
				input[val3] = 0
			i += 4

		else:
			print 'bad ', opcode
			exit(1)
			break

	return ret, i, False

def doRun(phases, signal):
	done = False
	for idx in range(5):
		p = phases[idx]
		signal, pointers[idx], done = runProgram(idx, inputs[idx], pointers[idx], p, signal)
	return signal, done

if __name__ == "__main__":

	max = 0

	for phases in seqs:
		inputs = [
			program[:],
			program[:],
			program[:],
			program[:],
			program[:],
		]

		inputRead = [False, False, False, False, False]

		pointers = [0, 0, 0, 0, 0]

		signal = 0
		done = False
		phases = [p + 4 for p in phases]

		while done == False:
			signal, done = doRun(phases, signal)
		if max < signal:
			max = signal

	print max
